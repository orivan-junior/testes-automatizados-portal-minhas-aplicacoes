pipeline {
    agent any

    environment {
        CI = 'true'
        NEXUS_URL = 'http://nexus:8081'
        // NEXUS_USER e NEXUS_PASS agora vêm das variáveis globais do Jenkins
        // Configure essas variáveis em: Gerenciar Jenkins → Configure System → Global properties → Environment variables
        // Uncomment and configure if behind a proxy:
        // HTTP_PROXY = 'http://proxy.company.com:8080'
        // HTTPS_PROXY = 'http://proxy.company.com:8080'
        // NO_PROXY = 'localhost,127.0.0.1,nexus'
    }

    stages {
        stage('Network Diagnostics & Fix') {
            steps {
                sh '''
                    echo "🔍 Diagnóstico de rede..."
                    
                    # Instalar ferramentas de rede se necessário
                    echo "📦 Instalando ferramentas de rede..."
                    apt-get update -qq
                    apt-get install -y dnsutils iputils-ping curl || echo "Falha ao instalar ferramentas"
                    
                    echo "🔧 Configurando DNS..."
                    # Configurar DNS público se não conseguir resolver
                    if ! nslookup github.com >/dev/null 2>&1; then
                        echo "Configurando DNS público..."
                        echo "nameserver 8.8.8.8" >> /etc/resolv.conf
                        echo "nameserver 8.8.4.4" >> /etc/resolv.conf
                        echo "nameserver 1.1.1.1" >> /etc/resolv.conf
                        
                        # Aguardar um pouco para o DNS se propagar
                        sleep 2
                        
                        # Se ainda não funcionar, adicionar entrada no hosts
                        if ! nslookup github.com >/dev/null 2>&1; then
                            echo "DNS ainda falha, adicionando entrada no /etc/hosts..."
                            echo "140.82.112.4 github.com" >> /etc/hosts
                            echo "140.82.112.3 api.github.com" >> /etc/hosts
                        fi
                    fi
                    
                    echo "🧪 Testando conectividade após configuração:"
                    echo "Testando resolução DNS:"
                    nslookup github.com || echo "❌ DNS ainda falha"
                    echo "Testando conectividade:"
                    ping -c 3 github.com || echo "❌ Ping falhou"
                    echo "Testando HTTPS:"
                    curl -I --connect-timeout 10 https://github.com || echo "❌ HTTPS falhou"
                    echo "Verificando configuração de proxy:"
                    echo "HTTP_PROXY: ${HTTP_PROXY:-'não configurado'}"
                    echo "HTTPS_PROXY: ${HTTPS_PROXY:-'não configurado'}"
                '''
            }
        }

        stage('Checkout') {
            steps {
                script {
                    // Tentar HTTPS primeiro, se falhar, tentar SSH
                    try {
                        echo "🔄 Tentando checkout via HTTPS..."
                        git branch: 'main',
                            url: 'https://github.com/orivan-junior/testes-automatizados-portal-minhas-aplicacoes.git',
                            credentialsId: 'github-credentials'
                        echo "✅ Checkout HTTPS bem-sucedido!"
                    } catch (Exception e) {
                        echo "❌ Checkout HTTPS falhou: ${e.getMessage()}"
                        echo "🔄 Tentando checkout via SSH..."
                        try {
                            git branch: 'main',
                                url: 'git@github.com:orivan-junior/testes-automatizados-portal-minhas-aplicacoes.git',
                                credentialsId: 'github-ssh-key'
                            echo "✅ Checkout SSH bem-sucedido!"
                        } catch (Exception sshError) {
                            echo "❌ Checkout SSH também falhou: ${sshError.getMessage()}"
                            echo "🚨 Ambos os métodos de checkout falharam!"
                            throw sshError
                        }
                    }
                }
            }
        }

        stage('Install Node.js (Skip if exists)') {
            steps {
                sh '''
                    if ! command -v node &> /dev/null; then
                        echo "Instalando Node.js 18..."
                        curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
                        apt-get update && apt-get install -y nodejs
                    else
                        echo "Node.js já instalado: $(node --version)"
                    fi
                '''
            }
        }

        stage('Install Dependencies') {
            steps {
                sh 'npm ci'
            }
        }

        stage('Install Playwright Browsers (Chrome only)') {
            steps {
                sh '''
                    if [ ! -d "$HOME/.cache/ms-playwright" ]; then
                        echo "Instalando apenas Chrome..."
                        npx playwright install chromium --with-deps
                    else
                        echo "Browsers já instalados, pulando instalação"
                    fi
                '''
            }
        }

        stage('Run Tests (Chrome only)') {
            steps {
                // Captura falhas nos testes para continuar o pipeline e permitir upload dos artefatos
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    sh '''
                        # ...existing setup...
                        echo "Gerando testes BDD e executando Playwright filtrando pela tag @consulta-cartao"
                        # Gera os testes a partir das features
                        npx bddgen || echo "bddgen falhou (continuando para captar relatórios)"
                        # Executa o runner do Playwright; força geração do relatório HTML em playwright-report
                        npx playwright test --grep "@consulta-cartao" --reporter=html
                    '''
                }
            }
        }

        stage('Upload Evidence to Nexus') {
            steps {
                script {
                    def timestamp = new Date().format('yyyy-MM-dd_HH-mm-ss')
                    def buildNumber = env.BUILD_NUMBER
                    
                    sh '''
                        echo "📤 Fazendo upload das evidências para o Nexus..."
                        
                        # Criar diretório temporário
                        mkdir -p /tmp/evidence-upload
                        
                        # Copiar evidências
                        cp -r test-results/screenshots /tmp/evidence-upload/ 2>/dev/null || echo "Nenhuma screenshot encontrada"
                        cp -r test-results/videos /tmp/evidence-upload/ 2>/dev/null || echo "Nenhum vídeo encontrado"
                        cp -r allure-results /tmp/evidence-upload/ 2>/dev/null || echo "Nenhum resultado Allure encontrado"
                        # Copiar relatório do Playwright (HTML)
                        cp -r playwright-report /tmp/evidence-upload/ 2>/dev/null || echo "Nenhum playwright-report encontrado"
                        
                        # Criar arquivo de informações do build
                        cat > /tmp/evidence-upload/build-info.txt << EOF
Build Number: ${BUILD_NUMBER}
Timestamp: ${timestamp}
Branch: ${GIT_BRANCH}
Commit: ${GIT_COMMIT}
Jenkins URL: ${BUILD_URL}
EOF
                        
                        # Fazer upload para Nexus (inclui playwright-report quando presente)
                        cd /tmp/evidence-upload
                        tar -czf evidence-${BUILD_NUMBER}-${timestamp}.tar.gz playwright-report allure-results build-info.txt screenshots videos 2>/dev/null || \
                        tar -czf evidence-${BUILD_NUMBER}-${timestamp}.tar.gz playwright-report allure-results build-info.txt 2>/dev/null || \
                        tar -czf evidence-${BUILD_NUMBER}-${timestamp}.tar.gz allure-results build-info.txt || \
                        tar -czf evidence-${BUILD_NUMBER}-${timestamp}.tar.gz build-info.txt
                        
                        # Upload usando curl
                        curl -u ${NEXUS_USER}:${NEXUS_PASS} \
                             --upload-file evidence-${BUILD_NUMBER}-${timestamp}.tar.gz \
                             ${NEXUS_URL}/repository/playwright-evidence/evidence-${BUILD_NUMBER}-${timestamp}.tar.gz || echo "Upload falhou"
                        
                        echo "✅ Upload concluído (quando aplicável)"
                        echo "🔗 URL provável: ${NEXUS_URL}/repository/playwright-evidence/evidence-${BUILD_NUMBER}-${timestamp}.tar.gz"
                    '''
                }
            }
        }

        stage('Upload Reports to Nexus') {
            steps {
                script {
                    def timestamp = new Date().format('yyyy-MM-dd_HH-mm-ss')
                    def buildNumber = env.BUILD_NUMBER
                    
                    sh '''
                        echo "📤 Fazendo upload dos relatórios para o Nexus..."
                        
                        # Criar diretório temporário para relatórios
                        mkdir -p /tmp/reports-upload
                        
                        # Copiar relatórios
                        cp -r test-results /tmp/reports-upload/ 2>/dev/null || echo "Nenhum resultado de teste encontrado"
                        cp -r allure-results /tmp/reports-upload/ 2>/dev/null || echo "Nenhum resultado Allure encontrado"
                        cp -r playwright-report /tmp/reports-upload/ 2>/dev/null || echo "Nenhum playwright-report encontrado"
                        
                        # Criar arquivo de informações do build
                        cat > /tmp/reports-upload/build-info.txt << EOF
Build Number: ${BUILD_NUMBER}
Timestamp: ${timestamp}
Branch: ${GIT_BRANCH}
Commit: ${GIT_COMMIT}
Jenkins URL: ${BUILD_URL}
EOF
                        
                        # Fazer upload para Nexus (inclui playwright-report)
                        cd /tmp/reports-upload
                        tar -czf reports-${BUILD_NUMBER}-${timestamp}.tar.gz playwright-report test-results allure-results build-info.txt 2>/dev/null || \
                        tar -czf reports-${BUILD_NUMBER}-${timestamp}.tar.gz test-results allure-results build-info.txt || \
                        tar -czf reports-${BUILD_NUMBER}-${timestamp}.tar.gz playwright-report build-info.txt || \
                        tar -czf reports-${BUILD_NUMBER}-${timestamp}.tar.gz build-info.txt
                        
                        curl -u ${NEXUS_USER}:${NEXUS_PASS} \
                             --upload-file reports-${BUILD_NUMBER}-${timestamp}.tar.gz \
                             ${NEXUS_URL}/repository/playwright-reports/reports-${BUILD_NUMBER}-${timestamp}.tar.gz || echo "Upload falhou"
                        
                        echo "✅ Upload de relatórios concluído (quando aplicável)"
                        echo "🔗 URL provável: ${NEXUS_URL}/repository/playwright-reports/reports-${BUILD_NUMBER}-${timestamp}.tar.gz"
                    '''
                }
            }
        }
    }

    post {
        always {
            // Gerar relatório Allure
            allure([
                includeProperties: false,
                jdk: '',
                properties: [],
                reportBuildPolicy: 'ALWAYS',
                results: [[path: 'allure-results']]
            ])
            
            // Arquivos de evidência
            archiveArtifacts artifacts: 'test-results/**/*', allowEmptyArchive: true
            archiveArtifacts artifacts: 'allure-results/**/*', allowEmptyArchive: true
            // Arquivar o relatório HTML do Playwright
            archiveArtifacts artifacts: 'playwright-report/**/*', allowEmptyArchive: true
            
            // Limpar arquivos temporários
            sh 'rm -rf /tmp/evidence-upload /tmp/reports-upload'
        }
    }
}