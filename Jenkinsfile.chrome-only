pipeline {
    agent any

    environment {
        CI = 'true'
        NEXUS_URL = 'http://nexus:8081'
        NEXUS_USER = 'admin'
        NEXUS_PASS = credentials('nexus-password') // Usar credenciais do Jenkins
    }

    stages {
        stage('Checkout') {
            steps {
                // Usando SSH com o ID correto das credenciais
                git branch: 'main', 
                     url: 'git@github.com:orivan-junior/testes-automatizados-portal-minhas-aplicacoes.git',
                     credentialsId: 'jenkins-ssh-key' // ‚úÖ ID correto
            }
        }

        stage('Install Node.js (Skip if exists)') {
            steps {
                sh '''
                    if ! command -v node &> /dev/null; then
                        echo "Instalando Node.js 18..."
                        curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
                        apt-get update && apt-get install -y nodejs
                    else
                        echo "Node.js j√° instalado: $(node --version)"
                    fi
                '''
            }
        }

        stage('Install Dependencies') {
            steps {
                sh 'npm ci'
            }
        }

        stage('Install Playwright Browsers (Chrome only)') {
            steps {
                sh '''
                    if [ ! -d "$HOME/.cache/ms-playwright" ]; then
                        echo "Instalando apenas Chrome..."
                        npx playwright install chromium --with-deps
                    else
                        echo "Browsers j√° instalados, pulando instala√ß√£o"
                    fi
                '''
            }
        }

        stage('Run Tests (Chrome only)') {
            steps {
                // Captura falhas nos testes para continuar o pipeline
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    sh '''
                        echo "Gerando testes BDD e executando Playwright filtrando pela tag @consulta-cartao"
                        # Gera os testes a partir das features
                        npx bddgen || echo "bddgen falhou (continuando para captar relat√≥rios)"
                        # Executa o runner do Playwright; for√ßa gera√ß√£o do relat√≥rio HTML
                        npx playwright test --grep "@consulta-cartao" --reporter=html
                    '''
                }
            }
        }

        stage('Upload Evidence to Nexus') {
            steps {
                script {
                    def timestamp = new Date().format('yyyy-MM-dd_HH-mm-ss')
                    def buildNumber = env.BUILD_NUMBER
                    
                    sh '''
                        echo "üì§ Fazendo upload das evid√™ncias para o Nexus..."
                        
                        # Criar diret√≥rio tempor√°rio
                        mkdir -p /tmp/evidence-upload
                        
                        # Copiar evid√™ncias (com verifica√ß√£o de exist√™ncia)
                        [ -d "test-results/screenshots" ] && cp -r test-results/screenshots /tmp/evidence-upload/ || echo "Nenhuma screenshot encontrada"
                        [ -d "test-results/videos" ] && cp -r test-results/videos /tmp/evidence-upload/ || echo "Nenhum v√≠deo encontrado"
                        [ -d "allure-results" ] && cp -r allure-results /tmp/evidence-upload/ || echo "Nenhum resultado Allure encontrado"
                        [ -d "playwright-report" ] && cp -r playwright-report /tmp/evidence-upload/ || echo "Nenhum playwright-report encontrado"
                        
                        # Criar arquivo de informa√ß√µes do build
                        cat > /tmp/evidence-upload/build-info.txt << EOF
Build Number: ${BUILD_NUMBER}
Timestamp: ${timestamp}
Branch: ${GIT_BRANCH}
Commit: ${GIT_COMMIT}
Jenkins URL: ${BUILD_URL}
EOF
                        
                        # Fazer upload para Nexus
                        cd /tmp/evidence-upload
                        tar -czf evidence-${BUILD_NUMBER}-${timestamp}.tar.gz . 2>/dev/null
                        
                        # Upload usando curl com tratamento de erro
                        if curl -u ${NEXUS_USER}:${NEXUS_PASS} \
                             --upload-file evidence-${BUILD_NUMBER}-${timestamp}.tar.gz \
                             ${NEXUS_URL}/repository/playwright-evidence/evidence-${BUILD_NUMBER}-${timestamp}.tar.gz; then
                            echo "‚úÖ Upload conclu√≠do com sucesso"
                            echo "üîó URL: ${NEXUS_URL}/repository/playwright-evidence/evidence-${BUILD_NUMBER}-${timestamp}.tar.gz"
                        else
                            echo "‚ùå Upload falhou"
                            exit 1
                        fi
                    '''
                }
            }
        }

        stage('Upload Reports to Nexus') {
            steps {
                script {
                    def timestamp = new Date().format('yyyy-MM-dd_HH-mm-ss')
                    def buildNumber = env.BUILD_NUMBER
                    
                    sh '''
                        echo "üì§ Fazendo upload dos relat√≥rios para o Nexus..."
                        
                        # Criar diret√≥rio tempor√°rio para relat√≥rios
                        mkdir -p /tmp/reports-upload
                        
                        # Copiar relat√≥rios (com verifica√ß√£o de exist√™ncia)
                        [ -d "test-results" ] && cp -r test-results /tmp/reports-upload/ || echo "Nenhum resultado de teste encontrado"
                        [ -d "allure-results" ] && cp -r allure-results /tmp/reports-upload/ || echo "Nenhum resultado Allure encontrado"
                        [ -d "playwright-report" ] && cp -r playwright-report /tmp/reports-upload/ || echo "Nenhum playwright-report encontrado"
                        
                        # Criar arquivo de informa√ß√µes do build
                        cat > /tmp/reports-upload/build-info.txt << EOF
Build Number: ${BUILD_NUMBER}
Timestamp: ${timestamp}
Branch: ${GIT_BRANCH}
Commit: ${GIT_COMMIT}
Jenkins URL: ${BUILD_URL}
EOF
                        
                        # Fazer upload para Nexus
                        cd /tmp/reports-upload
                        tar -czf reports-${BUILD_NUMBER}-${timestamp}.tar.gz . 2>/dev/null
                        
                        # Upload usando curl com tratamento de erro
                        if curl -u ${NEXUS_USER}:${NEXUS_PASS} \
                             --upload-file reports-${BUILD_NUMBER}-${timestamp}.tar.gz \
                             ${NEXUS_URL}/repository/playwright-reports/reports-${BUILD_NUMBER}-${timestamp}.tar.gz; then
                            echo "‚úÖ Upload de relat√≥rios conclu√≠do com sucesso"
                            echo "üîó URL: ${NEXUS_URL}/repository/playwright-reports/reports-${BUILD_NUMBER}-${timestamp}.tar.gz"
                        else
                            echo "‚ùå Upload falhou"
                            exit 1
                        fi
                    '''
                }
            }
        }
    }

    post {
        always {
            // Gerar relat√≥rio Allure
            allure([
                includeProperties: false,
                jdk: '',
                properties: [],
                reportBuildPolicy: 'ALWAYS',
                results: [[path: 'allure-results']]
            ])
            
            // Arquivos de evid√™ncia
            archiveArtifacts artifacts: 'test-results/**/*', allowEmptyArchive: true
            archiveArtifacts artifacts: 'allure-results/**/*', allowEmptyArchive: true
            archiveArtifacts artifacts: 'playwright-report/**/*', allowEmptyArchive: true
            
            // Limpar arquivos tempor√°rios
            sh 'rm -rf /tmp/evidence-upload /tmp/reports-upload 2>/dev/null || true'
        }
        
        failure {
            echo "‚ùå Pipeline falhou"
            // Aqui voc√™ pode adicionar notifica√ß√µes (email, Slack, etc.)
        }
        
        success {
            echo "‚úÖ Pipeline executado com sucesso"
        }
    }
}
