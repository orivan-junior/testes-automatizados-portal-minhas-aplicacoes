pipeline {
    agent any


    environment {
        CI = 'true'
        NEXUS_URL = 'http://nexus:8081'
        NEXUS_USER = 'jenkins'
        NEXUS_PASS = 'jenkins123'
    }

    stages {
        stage('Configure Network') {
            steps {
                sh '''
                    echo "🔧 Configurando rede para acesso ao GitHub..."
                    echo "📋 Projeto: Portal Minhas Aplicações - Testes Automatizados"
                    echo "🎯 Foco: Testes de Consulta Cartão"
                    echo "🔗 Repositório: orivan-junior/testes-automatizados-portal-minhas-aplicacoes"
                    
                    # Limpar configurações anteriores (ignorar erros se não existirem)
                    unset HTTP_PROXY
                    unset HTTPS_PROXY
                    git config --global --unset http.proxy || true
                    git config --global --unset https.proxy || true
                    
                    echo "✅ Configuração de rede concluída"
                    echo "⚠️ Tentando checkout direto - se falhar, tentaremos SSH"
                '''
            }
        }

        stage('Checkout') {
            steps {
                script {
                    try {
                        echo "🔄 Tentando checkout via HTTPS..."
                        git branch: 'main', 
                             url: 'https://github.com/orivan-junior/testes-automatizados-portal-minhas-aplicacoes.git',
                             credentialsId: 'github-credentials'
                        echo "✅ Checkout HTTPS bem-sucedido!"
                    } catch (Exception e) {
                        echo "❌ Checkout HTTPS falhou: ${e.getMessage()}"
                        echo "🔄 Tentando checkout via SSH..."
                        try {
                            git branch: 'main',
                                url: 'git@github.com:orivan-junior/testes-automatizados-portal-minhas-aplicacoes.git',
                                credentialsId: 'jenkins-ssh-key'
                            echo "✅ Checkout SSH bem-sucedido!"
                        } catch (Exception sshError) {
                            echo "❌ Checkout SSH também falhou: ${sshError.getMessage()}"
                            echo "🚨 Ambos os métodos de checkout falharam!"
                            throw sshError
                        }
                    }
                }
            }
        }

        stage('Install Node.js (Skip if exists)') {
            steps {
                sh '''
                    if ! command -v node &> /dev/null; then
                        echo "Instalando Node.js 18..."
                        curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
                        apt-get update && apt-get install -y nodejs
                    else
                        echo "Node.js já instalado: $(node --version)"
                    fi
                '''
            }
        }

        stage('Install Dependencies') {
            steps {
                sh 'npm ci'
            }
        }

        stage('Install Playwright Browsers (Chrome only)') {
            steps {
                sh '''
                    if [ ! -d "$HOME/.cache/ms-playwright" ]; then
                        echo "Instalando apenas Chrome..."
                        npx playwright install chromium --with-deps
                    else
                        echo "Browsers já instalados, pulando instalação"
                    fi
                '''
            }
        }

        stage('Run Tests (Chrome only)') {
            steps {
                // Captura falhas nos testes para continuar o pipeline
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    sh '''
                        echo "Gerando testes BDD e executando Playwright para Portal Minhas Aplicações"
                        echo "Executando testes de consulta cartão..."
                        
                        # Gera os testes a partir das features
                        npx bddgen || echo "bddgen falhou (continuando para captar relatórios)"
                        
                        # Executa apenas os testes de consulta cartão
                        npm run consulta-cartao
                    '''
                }
            }
        }

        stage('Upload Evidence to Nexus') {
            steps {
                script {
                    def timestamp = new Date().format('yyyy-MM-dd_HH-mm-ss')
                    def buildNumber = env.BUILD_NUMBER
                    
                    sh '''
                        echo "📤 Fazendo upload das evidências para o Nexus..."
                        echo "📋 Projeto: Portal Minhas Aplicações - Testes Automatizados"
                        echo "🎯 Foco: Testes de Consulta Cartão"
                        
                        # Criar diretório temporário
                        mkdir -p /tmp/evidence-upload
                        
                        # Copiar evidências (com verificação de existência)
                        [ -d "test-results/screenshots" ] && cp -r test-results/screenshots /tmp/evidence-upload/ || echo "Nenhuma screenshot encontrada"
                        [ -d "test-results/videos" ] && cp -r test-results/videos /tmp/evidence-upload/ || echo "Nenhum vídeo encontrado"
                        [ -d "allure-results" ] && cp -r allure-results /tmp/evidence-upload/ || echo "Nenhum resultado Allure encontrado"
                        [ -d "playwright-report" ] && cp -r playwright-report /tmp/evidence-upload/ || echo "Nenhum playwright-report encontrado"
                        
                        # Criar arquivo de informações do build
                        cat > /tmp/evidence-upload/build-info.txt << EOF
Build Number: ${BUILD_NUMBER}
Timestamp: ${timestamp}
Branch: ${GIT_BRANCH}
Commit: ${GIT_COMMIT}
Jenkins URL: ${BUILD_URL}
EOF
                        
                        # Fazer upload para Nexus
                        cd /tmp/evidence-upload
                        tar -czf evidence-${BUILD_NUMBER}-${timestamp}.tar.gz . 2>/dev/null
                        
                        # Upload usando curl com tratamento de erro
                        echo "🔄 Tentando upload para Nexus..."
                        echo "📁 Arquivo: evidence-${BUILD_NUMBER}-${timestamp}.tar.gz"
                        echo "🌐 URL: ${NEXUS_URL}/repository/playwright-evidence/"
                        
                        if curl -u ${NEXUS_USER}:${NEXUS_PASS} \
                             --upload-file evidence-${BUILD_NUMBER}-${timestamp}.tar.gz \
                             ${NEXUS_URL}/repository/playwright-evidence/evidence-${BUILD_NUMBER}-${timestamp}.tar.gz; then
                            echo "✅ Upload concluído com sucesso"
                            echo "🔗 URL: ${NEXUS_URL}/repository/playwright-evidence/evidence-${BUILD_NUMBER}-${timestamp}.tar.gz"
                        else
                            echo "❌ Upload falhou - continuando pipeline"
                            echo "⚠️ Verifique se o repositório 'playwright-evidence' existe no Nexus"
                            echo "📋 Evidências salvas localmente em: /tmp/evidence-upload/"
                        fi
                    '''
                }
            }
        }

        stage('Upload Reports to Nexus') {
            steps {
                script {
                    def timestamp = new Date().format('yyyy-MM-dd_HH-mm-ss')
                    def buildNumber = env.BUILD_NUMBER
                    
                    sh '''
                        echo "📤 Fazendo upload dos relatórios para o Nexus..."
                        echo "📋 Projeto: Portal Minhas Aplicações - Testes Automatizados"
                        echo "🎯 Foco: Testes de Consulta Cartão"
                        
                        # Criar diretório temporário para relatórios
                        mkdir -p /tmp/reports-upload
                        
                        # Copiar relatórios (com verificação de existência)
                        [ -d "test-results" ] && cp -r test-results /tmp/reports-upload/ || echo "Nenhum resultado de teste encontrado"
                        [ -d "allure-results" ] && cp -r allure-results /tmp/reports-upload/ || echo "Nenhum resultado Allure encontrado"
                        [ -d "playwright-report" ] && cp -r playwright-report /tmp/reports-upload/ || echo "Nenhum playwright-report encontrado"
                        
                        # Criar arquivo de informações do build
                        cat > /tmp/reports-upload/build-info.txt << EOF
Build Number: ${BUILD_NUMBER}
Timestamp: ${timestamp}
Branch: ${GIT_BRANCH}
Commit: ${GIT_COMMIT}
Jenkins URL: ${BUILD_URL}
EOF
                        
                        # Fazer upload para Nexus
                        cd /tmp/reports-upload
                        tar -czf reports-${BUILD_NUMBER}-${timestamp}.tar.gz . 2>/dev/null
                        
                        # Upload usando curl com tratamento de erro
                        echo "🔄 Tentando upload de relatórios para Nexus..."
                        echo "📁 Arquivo: reports-${BUILD_NUMBER}-${timestamp}.tar.gz"
                        echo "🌐 URL: ${NEXUS_URL}/repository/playwright-reports/"
                        
                        if curl -u ${NEXUS_USER}:${NEXUS_PASS} \
                             --upload-file reports-${BUILD_NUMBER}-${timestamp}.tar.gz \
                             ${NEXUS_URL}/repository/playwright-reports/reports-${BUILD_NUMBER}-${timestamp}.tar.gz; then
                            echo "✅ Upload de relatórios concluído com sucesso"
                            echo "🔗 URL: ${NEXUS_URL}/repository/playwright-reports/reports-${BUILD_NUMBER}-${timestamp}.tar.gz"
                        else
                            echo "❌ Upload de relatórios falhou - continuando pipeline"
                            echo "⚠️ Verifique se o repositório 'playwright-reports' existe no Nexus"
                            echo "📋 Relatórios salvos localmente em: /tmp/reports-upload/"
                        fi
                    '''
                }
            }
        }
    }

    post {
        always {
            script {
                // Gerar relatório Allure
                allure([
                    includeProperties: false,
                    jdk: '',
                    properties: [],
                    reportBuildPolicy: 'ALWAYS',
                    results: [[path: 'allure-results']]
                ])
                
                // Arquivos de evidência
                archiveArtifacts artifacts: 'test-results/**/*', allowEmptyArchive: true
                archiveArtifacts artifacts: 'allure-results/**/*', allowEmptyArchive: true
                archiveArtifacts artifacts: 'playwright-report/**/*', allowEmptyArchive: true
                
                // Limpar arquivos temporários
                sh 'rm -rf /tmp/evidence-upload /tmp/reports-upload 2>/dev/null || true'
            }
        }
        
        failure {
            echo "❌ Pipeline falhou"
        }
        
        success {
            echo "✅ Pipeline executado com sucesso"
        }
    }
}
