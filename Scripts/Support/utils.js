/**
 * Utilit√°rios para automa√ß√£o com Playwright
 * APENAS fun√ß√µes que atendem aos CRIT√âRIOS espec√≠ficos:
 *
 * CRIT√âRIO 1: REUTILIZA√á√ÉO M√öLTIPLA
 * - Fun√ß√£o usada em 3+ arquivos diferentes
 * - Mesmo padr√£o repetido em m√∫ltiplos cen√°rios
 *
 * CRIT√âRIO 2: COMPLEXIDADE T√âCNICA
 * - L√≥gica complexa que justifica encapsulamento
 * - Tratamento de erros espec√≠fico e reutiliz√°vel
 * - Intera√ß√µes com APIs ou sistemas externos
 *
 * CRIT√âRIO 3: MANUTEN√á√ÉO CENTRALIZADA
 * - Configura√ß√µes que podem mudar globalmente
 * - Padr√µes de projeto consistentes
 * - Logs e monitoring padronizados
 *
 * N√ÉO CRIAR: Fun√ß√µes usadas apenas 1x ou c√≥pia de funcionalidades nativas
 */

// Fun√ß√£o para gerar dados √∫nicos
export function gerarDadosUnicos(prefixo = 'teste') {
  const timestamp = Date.now();
  const random = Math.floor(Math.random() * 1000);
  return `${prefixo}${timestamp}${random}`;
}

// Fun√ß√£o para aguardar elemento estar pronto
export async function aguardarElementoPronto(page, selector, timeout = 15000) {
  try {
    await page.waitForSelector(selector, { state: 'visible', timeout });
    await page.waitForTimeout(1000); // Pequeno delay para estabiliza√ß√£o
    return true;
  } catch (error) {
    console.warn(`‚ö†Ô∏è Elemento n√£o encontrado: ${selector}`);
    return false;
  }
}

// Fun√ß√£o para clicar com retry
export async function clicarComRetry(page, selector, maxTentativas = 3) {
  for (let tentativa = 1; tentativa <= maxTentativas; tentativa++) {
    try {
      await page.waitForSelector(selector, { state: 'visible', timeout: 10000 });
      await page.click(selector);
      return true;
    } catch (error) {
      console.warn(`‚ö†Ô∏è Tentativa ${tentativa} falhou para: ${selector}`);
      if (tentativa === maxTentativas) throw error;
      await page.waitForTimeout(2000);
    }
  }
}

// Fun√ß√£o para preencher campo com foco
export async function preencherCampoComFoco(page, selector, valor) {
  try {
    await page.waitForSelector(selector, { state: 'visible', timeout: 10000 });
    await page.click(selector); // Foca no campo primeiro
    await page.fill(selector, valor);
    return true;
  } catch (error) {
    console.error(`‚ùå Erro ao preencher campo ${selector}:`, error.message);
    throw error;
  }
}

// Fun√ß√£o para aguardar frame estar dispon√≠vel
export async function aguardarFrame(page, frameName, timeout = 15000) {
  try {
    await page.locator(`frame[name="${frameName}"]`).waitFor({ 
      state: 'visible', 
      timeout 
    });
    return true;
  } catch (error) {
    console.error(`‚ùå Frame ${frameName} n√£o encontrado:`, error.message);
    throw error;
  }
}

// Fun√ß√£o para obter a √∫ltima p√°gina (popup)
export function obterUltimaPagina(page) {
  const pages = page.context().pages();
  return pages[pages.length - 1];
}

// Fun√ß√£o para aguardar carregamento da p√°gina
export async function aguardarCarregamentoPagina(page, timeout = 20000) {
  try {
    await page.waitForLoadState('domcontentloaded', { timeout });
    await page.waitForTimeout(2000); // Aguardar estabiliza√ß√£o
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao aguardar carregamento da p√°gina:', error.message);
    throw error;
  }
}

// Fun√ß√£o para validar mensagem de sucesso
export async function validarMensagemSucesso(page, seletor, textoEsperado) {
  try {
    await page.locator(seletor).waitFor({ 
      state: 'visible', 
      timeout: 15000 
    });
    
    const mensagem = await page.locator(seletor).textContent();
    console.log('üìù Mensagem recebida:', mensagem);
    
    if (mensagem && mensagem.includes(textoEsperado)) {
      console.log('‚úÖ Mensagem de sucesso validada!');
      return true;
    } else {
      throw new Error(`Mensagem esperada: "${textoEsperado}", Recebida: "${mensagem}"`);
    }
  } catch (error) {
    console.error('‚ùå Erro ao validar mensagem:', error.message);
    throw error;
  }
}

// Fun√ß√£o para configurar handler de di√°logos
export function configurarHandlerDialogos(page) {
  page.on('dialog', dialog => {
    console.log(`üí¨ Dialog detectado: ${dialog.message()}`);
    dialog.dismiss().catch(() => {});
  });
}

// Fun√ß√£o para aguardar login manual
export async function aguardarLoginManual(page, urlEsperada, timeout = 180000) {
  try {
    console.log('üîÑ Aguardando login manual...');
    console.log('üìù Por favor, fa√ßa o login manualmente na p√°gina que abriu');
    console.log('‚è≥ Aguardando at√© que voc√™ complete o login...');
    
    await page.waitForURL(urlEsperada, { timeout });
    
    const currentUrl = page.url();
    console.log('‚úÖ Login manual detectado! URL atual:', currentUrl);
    
    if (currentUrl.includes('about:blank')) {
      throw new Error('P√°gina em branco ap√≥s login - verifique se o login foi realizado corretamente');
    }
    
    await aguardarCarregamentoPagina(page);
    console.log('‚úÖ Continuando com o teste automaticamente...');
    
  } catch (error) {
    console.error('‚ùå Erro ao aguardar login manual:', error.message);
    console.log('üí° Dica: Certifique-se de que o login foi realizado corretamente');
    throw error;
  }
}

// Fun√ß√£o para executar a√ß√£o com retry
export async function executarComRetry(acao, maxTentativas = 3, delay = 2000) {
  for (let tentativa = 1; tentativa <= maxTentativas; tentativa++) {
    try {
      return await acao();
    } catch (error) {
      console.warn(`‚ö†Ô∏è Tentativa ${tentativa} falhou:`, error.message);
      if (tentativa === maxTentativas) throw error;
      await new Promise(resolve => setTimeout(resolve, delay));
    }
  }
}

// Fun√ß√£o para validar se elemento existe
export async function elementoExiste(page, selector, timeout = 5000) {
  try {
    await page.waitForSelector(selector, { state: 'visible', timeout });
    return true;
  } catch {
    return false;
  }
}

// Fun√ß√£o para aguardar elemento desaparecer
export async function aguardarElementoDesaparecer(page, selector, timeout = 10000) {
  try {
    await page.waitForSelector(selector, { state: 'hidden', timeout });
    return true;
  } catch (error) {
    console.warn(`‚ö†Ô∏è Elemento ${selector} n√£o desapareceu no tempo esperado`);
    return false;
  }
}

// Fun√ß√£o para fazer screenshot com timestamp
export async function screenshotComTimestamp(page, nome = 'screenshot') {
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  const nomeArquivo = `${nome}_${timestamp}.png`;
  await page.screenshot({ path: `test-results/${nomeArquivo}` });
  console.log(`üì∏ Screenshot salvo: ${nomeArquivo}`);
  return nomeArquivo;
}

// Fun√ß√£o para validar URL
export function validarURL(url, padrao) {
  return url.includes(padrao);
}

// ============ EXEMPLOS DE FUN√á√ïES QUE DEVEM SER CRIADAS ============

/*
EXEMPLO BASEADO NO SEU PROJETO:

1. FUN√á√ÉO PARA NAVEGA√á√ÉO ENTRE FRAMES (j√° existe - aguardarFrame)
   ‚úÖ Usada em m√∫ltiplos cen√°rios
   ‚úÖ Complexidade t√©cnica (frames aninhados)
   ‚úÖ Padr√£o consistente no sistema DSV

2. FUN√á√ÉO PARA TRATAMENTO DE POPUPS (j√° existe - obterUltimaPagina)
   ‚úÖ Necess√°ria em todo fluxo de login
   ‚úÖ L√≥gica complexa de detec√ß√£o de popups
   ‚úÖ Reutilizada em todos os cen√°rios

3. FUN√á√ÉO PARA VALIDA√á√ÉO DE MENSAGENS (j√° existe - validarMensagemSucesso)
   ‚úÖ Padr√£o consistente de valida√ß√£o
   ‚úÖ Tratamento de erros espec√≠fico
   ‚úÖ Usada em m√∫ltiplas opera√ß√µes CRUD

OUTROS EXEMPLOS QUE DEVEM SER CRIADOS:

// 4. Fun√ß√£o para navega√ß√£o no menu DSV
export async function navegarMenuDSV(page, menu, submenu) {
  // Complexa navega√ß√£o entre menus do DSV
  // Usada em todos os cen√°rios que precisam navegar
}

// 5. Fun√ß√£o para tratamento de tabelas de resultado
export async function buscarNaTabela(page, valor, coluna = 1) {
  // L√≥gica espec√≠fica para buscar em tabelas do sistema
  // Padr√£o comum em cen√°rios de pesquisa
}

// 6. Fun√ß√£o para valida√ß√£o de campos obrigat√≥rios
export async function validarCampoObrigatorio(page, seletor, nomeCampo) {
  // Valida√ß√£o espec√≠fica de campos obrigat√≥rios
  // Padr√£o usado em m√∫ltiplos formul√°rios
}

// N√ÉO CRIAR:
// - Fun√ß√µes usadas apenas 1x
// - Wrappers simples de m√©todos nativos do Playwright
// - L√≥gica espec√≠fica de um √∫nico cen√°rio
// - Fun√ß√µes que podem ser inline sem perder clareza
*/

// Fun√ß√£o para formatar data
export function formatarData(data = new Date()) {
  return data.toLocaleDateString('pt-BR', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric',
    hour: '2-digit',
    minute: '2-digit',
    second: '2-digit'
  });
}

// Fun√ß√£o para log estruturado
export function logEstruturado(tipo, mensagem, dados = null) {
  const timestamp = formatarData();
  const log = {
    timestamp,
    tipo,
    mensagem,
    dados
  };

  console.log(`[${timestamp}] ${tipo.toUpperCase()}: ${mensagem}`);
  if (dados) {
    console.log('üìä Dados:', JSON.stringify(dados, null, 2));
  }

  return log;
}

// ============ CHECKLIST ANTES DE CRIAR UMA FUN√á√ÉO ============

/*
ANTES DE CRIAR uma nova fun√ß√£o no utils.js, RESPONDA:

1. ‚úÖ SER√Å USADA EM 3+ ARQUIVOS DIFERENTES?
   - Se SIM: Pode ser candidato a utils
   - Se N√ÉO: Mantenha no arquivo espec√≠fico

2. ‚úÖ TEM L√ìGICA COMPLEXA QUE JUSTIFICA ENCAPSULAMENTO?
   - Retry autom√°tico com backoff
   - Tratamento espec√≠fico de erros
   - Intera√ß√µes complexas com DOM
   - Valida√ß√µes customizadas

3. ‚úÖ √â UM PADR√ÉO CONSISTENTE NO SISTEMA?
   - Mesmo fluxo repetido em m√∫ltiplos cen√°rios
   - Configura√ß√µes compartilhadas
   - Regras de neg√≥cio comuns

4. ‚úÖ VAI FACILITAR MANUTEN√á√ÉO FUTURA?
   - Mudan√ßas em um lugar afetam m√∫ltiplos testes
   - Centraliza√ß√£o de configura√ß√µes
   - Padr√µes documentados

EXEMPLO DO SEU PROJETO:

‚ùå N√ÉO CRIAR - Fun√ß√£o usada apenas 1x:
// function clicarBotaoSalvar(page) {
//   await page.click('#salvar');
// }

‚ùå N√ÉO CRIAR - Wrapper simples sem valor agregado:
// function esperarElementoVisivel(page, selector) {
//   return page.waitForSelector(selector, { state: 'visible' });
// }

‚úÖ CRIAR - Complexidade t√©cnica + reutiliza√ß√£o:
// function clicarComRetry(page, selector, maxTentativas = 3) {
   // L√≥gica complexa de retry com backoff
   // Tratamento espec√≠fico de erros
   // Usada em m√∫ltiplos cen√°rios
// }
*/
